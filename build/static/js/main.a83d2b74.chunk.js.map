{"version":3,"sources":["Components/Button.js","Components/mapButtons.js","pages/main.js","App.js","serviceWorker.js","index.js"],"names":["Button","color","props","background","document","getElementById","style","id","backgroundColor","onClick","Map","colors","map","key","Main","state","colorList","handleChange","bind","handleSubmit","handleClear","event","this","setState","target","value","includes","toLowerCase","colorlistThing","push","preventDefault","onSubmit","onChange","type","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAaeA,EAXA,SAAC,GAAa,IAEnBC,EAFkB,EAAXC,MAGPC,EAAaC,SAASC,eAAe,UAAUC,MAErD,OACI,4BAASC,GAAG,cAAcD,MAAO,CAACE,gBAAiBP,GACnDQ,QAAS,kBAAON,EAAWK,gBAAkBP,MCMtCS,EAZH,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACR,oCAEIA,EAAOC,KAAI,SAACX,EAAOY,GAAR,OACX,yBAAKN,GAAG,UAAUM,IAAKA,GACnB,kBAAC,EAAD,CAAQX,MAAOD,UCLrBE,EAAcC,SAASC,eAAe,SAASC,MA0DtCQ,E,kDAvDX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAQ,CACTd,MAAQ,GACRe,UAAY,IAEhB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBARJ,E,yDAWNG,GACTC,KAAKC,SAAS,CAACtB,MAAOoB,EAAMG,OAAOC,U,mCAG1BJ,GAGT,GAFAlB,EAAWK,gBAAkBc,KAAKP,MAAMd,MAEN,KAA/BE,EAAWK,iBAA+C,UAArBc,KAAKP,MAAMd,YAE5C,GAAGqB,KAAKP,MAAMC,UAAUU,SAASJ,KAAKP,MAAMd,MAAM0B,eACrDxB,EAAWK,gBAAkB,OAE1B,CACHL,EAAWK,gBAAkB,GAC7B,IAAIoB,EAAiBN,KAAKP,MAAMC,UAChCY,EAAeC,KAAKP,KAAKP,MAAMd,MAAM0B,eACrCL,KAAKC,SAAS,CAACP,UAAWY,IAE9BP,EAAMS,mB,oCAINR,KAAKC,SAAS,CAACP,UAAW,GAAIf,MAAO,O,+BAKrC,OACI,yBAAKM,GAAG,eACJ,0BAAMwB,SAAUT,KAAKH,cACjB,wBAAIZ,GAAG,SAASD,MAAO,CAACE,gBAAiBc,KAAKP,MAAMd,MAAOA,MAAO,UAAiC,KAArBqB,KAAKP,MAAMd,MAAc,yBAA2B,KAClI,2BAAOwB,MAAOH,KAAKP,MAAMd,MAAO+B,SAAUV,KAAKL,aAAcgB,KAAK,OAAO1B,GAAG,YAAY2B,YAAY,gBACpG,2BAAOD,KAAK,SAASR,MAAM,SAASlB,GAAG,YACvC,4BAAQE,QAASa,KAAKF,YAAab,GAAG,cAAtC,UAEJ,yBAAKA,GAAG,iBACJ,kBAAC,EAAD,CAAKI,OAAQW,KAAKP,MAAMC,kB,GAhDzBmB,aCSJC,E,uKARP,OACI,oCACI,kBAAC,EAAD,W,GAJED,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASC,eAAe,SDyHpB,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a83d2b74.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Button = ({props}) => {\r\n    \r\n    const color = props\r\n    const background = document.getElementById('color2').style\r\n    \r\n    return (\r\n        <button  id=\"colorButton\" style={{backgroundColor: color}} \r\n        onClick={() => (background.backgroundColor = color)}></button>\r\n    )\r\n}\r\n \r\nexport default Button","import React from 'react'\r\nimport Button from './Button'\r\n\r\nconst Map = ({colors}) => (\r\n    <>\r\n    {\r\n        colors.map((color, key) => (\r\n        <div id='buttons' key={key}>\r\n            <Button props={color} />\r\n        </div>\r\n        ))\r\n    }\r\n    </>\r\n)\r\n\r\nexport default Map","import  React, { Component } from 'react'\r\nimport Map from '../Components/mapButtons'\r\n\r\nconst background =  document.getElementById('color').style\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            color : '',\r\n            colorList : [],\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleClear = this.handleClear.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({color: event.target.value})\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        background.backgroundColor = this.state.color\r\n\r\n        if(background.backgroundColor === '' && this.state.color !== 'white') {\r\n\r\n        } else if(this.state.colorList.includes(this.state.color.toLowerCase())) {\r\n            background.backgroundColor = ''\r\n\r\n        } else {\r\n            background.backgroundColor = ''\r\n            var colorlistThing = this.state.colorList\r\n            colorlistThing.push(this.state.color.toLowerCase())\r\n            this.setState({colorList: colorlistThing})\r\n        }\r\n        event.preventDefault()\r\n    }\r\n\r\n    handleClear() {\r\n        this.setState({colorList: [], color: ''})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id='input-field'>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <h1 id='color2' style={{backgroundColor: this.state.color, color: 'Black'}} >{this.state.color === ''? \"Color's Will Show Here\" : \" \" }</h1>\r\n                    <input value={this.state.color} onChange={this.handleChange} type='text' id='inputtext' placeholder=\"Input Color\" />\r\n                    <input type=\"submit\" value=\"Button\" id='mButton' />\r\n                    <button onClick={this.handleClear} id='mButtontwo'>Clear</button>\r\n                </form>\r\n                <div id='buttonDisplay'>\r\n                    <Map colors={this.state.colorList}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Main","import React, {Component} from 'react';\nimport './App.css';\nimport Main from './pages/main'\n\nclass App extends Component {\n    render() {\n        return (\n            <>\n                <Main />\n            </>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}